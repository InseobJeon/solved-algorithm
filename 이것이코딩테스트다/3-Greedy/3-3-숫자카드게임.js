// I: 카드의 행의 갯수, 카드의 열의 갯수, 행 단위의 카드
// O: 게임의 룰에 맞는 가장 큰 카드의 숫자

// 게임의 룰 
// 1. 먼저 뽑고자 하는 카드가 있는 행을 선택한다.
// 2. 선택된 행에 포함된 카드 중 가장 숫자가 낮은 카드를 뽑아야한다.
// 3. 따라서, 처음에 카드를 골라낼 행을 선택할 때, 이후에 해당 행에서 가장 숫자가 낮은 카드를 뽑을 것을 고려하여 
// 최종적으로 가장 높은 숫자의 카드를 뽑을 수 있도록 전략을 세워야한다. 

// 학습한 문제 해결 전략 활용
// 1. 그리디로 풀어도 되는가? -> 내 선택이 다음 선택에 영향을 주지 않음 (이유는, 선택이 단 한 번으로 끝나기 때문)
// 2. 그리디의 정합성 검증 -> 매 시도마다 가장 좋은 조건을 "욕심부려" 뽑아도 됨 
// 3. 문제를 해결하기 위한 최소한의 아이디어 떠올려보기 :

// 결국 해야 하는 건, 행의 최소값이 나머지 모든 다른 행들의 최소값보다 큰 행을 고르고, 그 최소값을 return 하는 것이다 

const cardGame = (array) => {
    return Math.max(...array.map(eachArr => {
        return Math.min(...eachArr);
    }));
};

// console.log(cardGame([[7, 3, 1, 8], [3, 3, 3, 4]]));
console.log(cardGame([[3, 1, 2], [4, 1, 4], [2, 2, 2]]));
